## JSX
JavaScript的语法扩展

JSX中中的JavaScript表达式需要放到一个{}中

JSX可以防止注入攻击，因为JSX的内容在渲染之前都被转换为字符串了

Babel会把JSX转译为一个React.createElement()函数调用
React.createElement()可以创建一个虚拟DOM元素，包括元素的标签、class、内容、子元素等

## 元素渲染
ReactDOM会更新DOM来与React元素保持一致
React元素开销小

使用React创建的元素会挂载到一个根DOM节点上，挂载在该节点上的所有内容都会由ReactDOM管理
使用ReactDOM.render()可以将React元素渲染到根DOM节点中

React元素是不可变对象，创建后不可更改其子元素或者属性
目前更新UI的唯一方式是创建一个新的元素，传入ReactDOM.render()

ReactDOM会将元素前后状态进行对比，然后只更新变化的部分

## 组件
两种方式创建组件：
- 函数组件
- class组件

JSX规范：组件名称要以大写字母开头，以小写字母的组件被视为原生DOM标签

函数组件
只接收props对象，并返回一个React元素
props是只读属性，不会更改入参的函数被称为“纯函数”

## state
state是私有的，完全受控于当前组件
注意：
- 不要直接修state，应该使用setState
- state的更新可能是异步的，setState可以接收回调函数作为参数，回调函数的参数可以是上一个state和此次props
- setState把更新结果合并到state中，替换修改的状态，保留未修改的状态

## 生命周期函数
render 组件挂载、更新之前
componentDidMount 组件挂载完成
componentWillUnmount 组件从DOM中移除之前

## 数据向下流动
React组件是单数据流

## 事件处理
事件命名规则：小驼峰
React中阻止默认行为：e.preventDefault()
不需要使用addEventListener，而是在元素初始渲染时添加监听器，并在组件初始化时声明事件处理函数
注意事件处理函数需要绑定this，可以使用bind()，也可以使用class fields语法，
不推荐在绑定事件处理函数时使用回调函数，为了避免将该回调函数作为props传入子组件时会进行额外的渲染

## 事件传参
传参：
1. onClick={this.foo.bind(this, 参数)}
2. onClick={(e) => this.foo(参数, e)} // 箭头函数传参时，如果需要事件对象e，需要作为第二个参数传递
接收：
foo (参数, e) {
  ……
}

## 条件渲染
1. 用if语句
通过变量值控制渲染哪个组件
在render中进行判断并渲染

2. &&
条件 && 需要渲染的组件

3. 三目运算符
条件 ? 组件1 : 组件2

4. 阻止组件渲染
对于无状态组件：return null
对于有状态组件：render () { return null }

通过return null来阻止组件渲染，组件的生命周期依然完整

## 列表 & Key
JavaScript中使用map()方法遍历数组
每一个遍历的item需要绑定一个Key值，Key用于React识别哪些元素改变了

## 状态提升
数据共享（多个组件数据同步）
多个input的value数据源来自于其共同父组件的state中的状态
通过onChange改变input数据时，将改变后的数据传递给父组件，父组件更新state

## 组合 & 继承
导入组件时，如果是双标签导入，可以在组件标签中添加内容
该内容在组件中可以通过prop.children获取并使用

## 不同层级组件间传递数据
1. 通过props层层传递
2. 顶部组件要传递数据给底部组件，可以在顶部组件中将底部组件作为自定义组件，
在底部组件中写好接收数据的逻辑，然后将自定义组件作为参数传递给顶部组件和底部组件之间的中间组件
这样，顶部组件知道底部组件怎么使用数据，而中间组件不知道，类似于slots
function Ancestor (props) {
  const data = props.data
  const 自定义组件 = (
    <Child data={data}>
      /* Child的内容{使用data} */
    </Child>
  )

  return (
    <div>
      <Parent child={自定义组件} />
      /* 其他内容 */
    </div>
  )
}

function Parent (props) {
  return (
    <div>
      {props.child} /* <Child /> */
    </div>
  )
}

function Child (props) {
  return (
    <div>{/* 使用props.data */}</div>
  )
}
3. context

## Context
- React.createContext
const MyContext = React.createContext(defaultVal)
创建一个Context对象，并且给一个默认值，当订阅了这个Context对象的组件
没有从离自身最近的匹配了Provider的组件树中读取到当前的context值，就会使用默认值

如果传递的defaultVal为undefined，则不生效

- Context.Provider
<MyContext.Provider value={/*值*/>} />
Context对象会返回一个 Provider React组件
value属性改变时，能够传递给消费组件，以此通知消费组件context的变化，然后重新渲染
这些更新不受shouldComponentUpdate影响

检测新旧值和Object.is()具有相同算法

- Class.contextType
  1）单一订阅context
class MyClass extends React.Component {
  /* 可以在生命周期函数中通过this.context使用 */
}
MyClass.contextType = MyContext
将contextType挂在到class上，并把创建的context对象赋值给它，
在class中可以使用this.context来使用最近的Context上的值
  2）使用多个context
<Context1.Provider>
  <Context2.Provider>
    <Child />
  </Context2.Provider>
</Context1.Provider>

- Context.Consumer
<MyContext.Consumer>
  {value => /* 基于context值进行渲染 */}
</MyContext.Consumer>
将函数组件作为子元素
value等同于最近的Provider的value，如果没有Provider，等同于defaultVal

- Context.displatName
值为字符串，React DevTools使用该字符串确定context要显示的内容

使用：
假设 <Outer /> 组件内有子孙组件<Child />需要使用context对象数据
// 在 Outer 中导入Context文件，并用一个对象接收
import ContextObj from 'xxx/context.js'

// 将需要使用context对象的组件用Context.Provider作为标签包裹
// 并添加value属性，用来告知子孙组件context的变化
<ContextObj.Provider value={子孙组件需要的context数据}>
  <MiddleComponent>
    <Child />
  </MiddleComponent>
  <Child />
</ContextObj.Provider>

// 子孙组件
import ContextObj from 'xxx/context.js' // 需要先导入context对象

// 想要使用context对象的数据，需要添加contextType属性，
// 然后在组件生命周期函数中使用this.context接收contextObj对象
class Child extends React.Component {
  render () {
    let ctx = this.context
    return (
      <div>{ctx}</div> /* 使用context对象中的数据 */
    )
  }
}
Child.contextType = contextObj
export defaul Child // 需要先把contextType挂载到Child上，然后再暴露出去

## 错误边界
React组件，捕获并打印发生在其子组件树任何位置的JavaScript错误，
并且可以渲染出备用UI
在渲染期间、生命周期函数和整个组件树的构造函数中捕获错误

无法捕获的错误
事件处理
异步代码
服务端渲染
自身跑出来的错误

使用：
在class组件中定义一下两个生命周期函数中的任意一个或两个
static getDerivedStateFromError() // 渲染配用UI
componentDidCatch() // 打印错误日志

<ErrorBoundary>
  <Child /> // 被 错误边界 处理的组件
</ErrorBoundary>

class ErrorBoundary extends React.Component {
  static getDerivedStateFromError(err) {
    return xxx
  }

  componentDidCatch (err, errInfo) {
    // 发生错误时的处理
    this.setState({ err: err.toString() })
  }

  render () {
    return (
      // 希望捕获到错误时显示的内容
    )
  }
}

## try / catch
事件处理器
仅用于命令式代码
try {
  // 代码
} catch (err) {
  // 代码出错，捕获
}

